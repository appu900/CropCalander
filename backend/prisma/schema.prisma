// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Farmer {
  id            Int                   @id @default(autoincrement())
  name          String
  email         String?               @unique
  password      String
  phoneNumber   String                @unique
  address       String?
  cropsRequests CropCalandarRequest[]
}

model AgriExpert {
  id                   Int                   @id @default(autoincrement())
  name                 String
  email                String                @unique
  password             String
  phoneNumber          String                @unique
  cropCalandars        CropCalandar[]
  cropCalanderRequests CropCalandarRequest[]
  address              String?
}

model CropCalandarRequest {
  id                 Int           @id @default(autoincrement())
  farmerId           Int
  farmer             Farmer        @relation(fields: [farmerId], references: [id])
  expert             AgriExpert?   @relation(fields: [expertId], references: [id])
  expertId           Int?
  projectName        String?
  projectDescription String?
  cropName           String
  cropType           String
  filedSize          Float
  seedVaraity        String?
  location           String
  season             String
  startDate          DateTime
  status             RequestStatus @default(PENDING)
  cropCalandar       CropCalandar?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@index([farmerId, status])
}

model CropCalandar {
  id            Int                 @id @default(autoincrement())
  requestId     Int                 @unique
  farmerRequest CropCalandarRequest @relation(fields: [requestId], references: [id])
  expert        AgriExpert          @relation(fields: [expertId], references: [id])
  expertId      Int
  season        String
  createdAt     DateTime            @default(now())
  activities    Activity[]
  updatedAt     DateTime            @updatedAt
}

model Activity {
  id           Int          @id @default(autoincrement())
  calandarId   Int
  cropCalandar CropCalandar @relation(fields: [calandarId], references: [id])
  activityName String
  activityType String
  startDate    DateTime
  endDate      DateTime
  description  String?

  @@index([calandarId, startDate])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  COMPLETED
}
